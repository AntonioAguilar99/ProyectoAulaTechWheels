/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package techwheels.Interfaces;

import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import techwheels.Clases.CarritoTemp;
import techwheels.Clases.Compra;
import techwheels.Clases.Enumeraciones.RolUsuarioEnum;
import techwheels.Clases.GestionProductos;
import techwheels.Clases.Usuario;
import techwheels.Infraestructura.Config.Bd.ConexionBd;

/**
 *
 * @author anton
 */
public class Administrador extends javax.swing.JFrame {

    /**
     * Creates new form Administrador
     */
    public Administrador() {
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Administrador = new javax.swing.JTabbedPane();
        Usuarios = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        Registro = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        txtApellidos = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        txtNumeroDocumento = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        txtTelefono = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        cmbRol = new javax.swing.JComboBox<>();
        comboTipoDocumento = new javax.swing.JComboBox<>();
        txtCorreo = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        setContrasena = new javax.swing.JPasswordField();
        jSeparator6 = new javax.swing.JSeparator();
        jButton4 = new javax.swing.JButton();
        RealizarCompra = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaProductos1 = new javax.swing.JTable();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        Nombre = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        jSeparator13 = new javax.swing.JSeparator();
        txtNumero = new javax.swing.JTextField();
        jSeparator14 = new javax.swing.JSeparator();
        jLabel32 = new javax.swing.JLabel();
        comboMetodo = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        fechaChooser = new com.toedter.calendar.JDateChooser();
        CancelarCompra = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        HistorialCompras = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();
        GestionProductos = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jSeparator8 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        txtCantidad = new javax.swing.JTextField();
        txtMarca = new javax.swing.JTextField();
        jSeparator9 = new javax.swing.JSeparator();
        comboCategoria = new javax.swing.JComboBox<>();
        jSeparator10 = new javax.swing.JSeparator();
        txtPrecio = new javax.swing.JTextField();
        jSeparator11 = new javax.swing.JSeparator();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Usuarios.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/visibility.png"))); // NOI18N
        jButton1.setText("Mostrar Usuarios");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cancelled.png"))); // NOI18N
        jButton2.setText("Eliminar Usuario");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaUsuarios);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/exit.png"))); // NOI18N
        jButton3.setText("Salir\n");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/refresh.png"))); // NOI18N
        jButton11.setText("Refrescar");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cooltext482257288908357.png"))); // NOI18N

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/llave-inglesa.png"))); // NOI18N

        javax.swing.GroupLayout UsuariosLayout = new javax.swing.GroupLayout(Usuarios);
        Usuarios.setLayout(UsuariosLayout);
        UsuariosLayout.setHorizontalGroup(
            UsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UsuariosLayout.createSequentialGroup()
                .addGroup(UsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UsuariosLayout.createSequentialGroup()
                        .addGroup(UsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UsuariosLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(UsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2)
                                    .addComponent(jButton1)))
                            .addGroup(UsuariosLayout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addGroup(UsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton11)
                                    .addGroup(UsuariosLayout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jButton3)))))
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UsuariosLayout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        UsuariosLayout.setVerticalGroup(
            UsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UsuariosLayout.createSequentialGroup()
                .addGroup(UsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UsuariosLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel21))
                    .addGroup(UsuariosLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel20)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(UsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UsuariosLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(58, 58, 58)
                        .addComponent(jButton2)
                        .addGap(67, 67, 67)
                        .addComponent(jButton11)
                        .addGap(72, 72, 72)
                        .addComponent(jButton3)
                        .addGap(72, 72, 72))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UsuariosLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42))))
        );

        Administrador.addTab("Usuarios", Usuarios);

        Registro.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Registre a los Usuarios Facil y Rapido");

        jLabel2.setText("Nombres");

        jLabel3.setText("Apellidos");

        jLabel4.setText("Tipo de Usuario");

        jLabel5.setText("Tipo de Documento");

        jLabel6.setText("Numero de Documento");

        jLabel7.setText("Numero de Celular");

        jLabel8.setText("Correo Electronico");

        jLabel9.setText("Contraseña");

        txtNombres.setBorder(null);

        txtApellidos.setBorder(null);

        txtNumeroDocumento.setBorder(null);

        txtTelefono.setBorder(null);
        txtTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefonoActionPerformed(evt);
            }
        });

        cmbRol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Cliente", "Administrador" }));

        comboTipoDocumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "C.C", "Cedula de Extranjeria" }));

        txtCorreo.setBorder(null);

        setContrasena.setBorder(null);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/register.png"))); // NOI18N
        jButton4.setText("Registrar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RegistroLayout = new javax.swing.GroupLayout(Registro);
        Registro.setLayout(RegistroLayout);
        RegistroLayout.setHorizontalGroup(
            RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegistroLayout.createSequentialGroup()
                .addGap(558, 558, 558)
                .addComponent(jButton4)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(RegistroLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RegistroLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegistroLayout.createSequentialGroup()
                        .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCorreo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombres, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RegistroLayout.createSequentialGroup()
                                .addGap(236, 236, 236)
                                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(setContrasena, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegistroLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(166, 166, 166))))
                    .addGroup(RegistroLayout.createSequentialGroup()
                        .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(274, 274, 274)
                        .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNumeroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        RegistroLayout.setVerticalGroup(
            RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegistroLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addGap(61, 61, 61)
                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66)
                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumeroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setContrasena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(77, 77, 77))
        );

        Administrador.addTab("Registrar", Registro);

        RealizarCompra.setBackground(new java.awt.Color(255, 255, 255));

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cooltext482257288908357.png"))); // NOI18N

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/llave-inglesa.png"))); // NOI18N

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/visibility.png"))); // NOI18N
        jButton13.setText("Ver productos disponibles");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/shopping-cart.png"))); // NOI18N
        jButton14.setText("Agregar al carrito");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/up-arrow.png"))); // NOI18N
        jButton15.setText("Comprar");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        tablaProductos1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tablaProductos1);

        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/shopping-cart.png"))); // NOI18N
        jButton17.setText("Ver carrito de compras");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cancelled.png"))); // NOI18N
        jButton18.setText("Quitar del carrito");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jLabel29.setText("Ingrese su nombre");

        Nombre.setBorder(null);

        jLabel30.setText("Tipo de documento");

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "C.C", " " }));

        jLabel31.setText("Numero de documento");

        txtNumero.setBorder(null);
        txtNumero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroActionPerformed(evt);
            }
        });

        jLabel32.setText("Metodo de pago");

        comboMetodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Tarjeta de Credito", "Efectivo", " " }));

        jLabel33.setText("Fecha");

        javax.swing.GroupLayout RealizarCompraLayout = new javax.swing.GroupLayout(RealizarCompra);
        RealizarCompra.setLayout(RealizarCompraLayout);
        RealizarCompraLayout.setHorizontalGroup(
            RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RealizarCompraLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(RealizarCompraLayout.createSequentialGroup()
                .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RealizarCompraLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(249, 249, 249))
                    .addGroup(RealizarCompraLayout.createSequentialGroup()
                        .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RealizarCompraLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton13)
                                    .addGroup(RealizarCompraLayout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(RealizarCompraLayout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(RealizarCompraLayout.createSequentialGroup()
                                .addGap(148, 148, 148)
                                .addComponent(fechaChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)))
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        RealizarCompraLayout.setVerticalGroup(
            RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RealizarCompraLayout.createSequentialGroup()
                .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RealizarCompraLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel22))
                    .addGroup(RealizarCompraLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel23)))
                .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RealizarCompraLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(64, Short.MAX_VALUE))
                    .addGroup(RealizarCompraLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(jLabel32))
                        .addGap(1, 1, 1)
                        .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fechaChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton13)
                            .addComponent(jButton14))
                        .addGap(47, 47, 47)
                        .addGroup(RealizarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton17)
                            .addComponent(jButton18))
                        .addGap(38, 38, 38)
                        .addComponent(jButton15)
                        .addGap(41, 41, 41))))
        );

        Administrador.addTab("Realizar Compra", RealizarCompra);

        CancelarCompra.setBackground(new java.awt.Color(255, 255, 255));

        jLabel10.setBackground(new java.awt.Color(0, 0, 0));
        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("CANCELE  LAS COMPRAS FACIL Y RAPIDO");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cancelled.png"))); // NOI18N
        jButton5.setText("Cancelar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/visibility.png"))); // NOI18N
        jButton12.setText("Buscar");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/llave-inglesa.png"))); // NOI18N

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cooltext482257288908357.png"))); // NOI18N
        jLabel27.setText("jLabel27");

        javax.swing.GroupLayout CancelarCompraLayout = new javax.swing.GroupLayout(CancelarCompra);
        CancelarCompra.setLayout(CancelarCompraLayout);
        CancelarCompraLayout.setHorizontalGroup(
            CancelarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CancelarCompraLayout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addGroup(CancelarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CancelarCompraLayout.createSequentialGroup()
                        .addComponent(jButton12)
                        .addGap(9, 9, 9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 843, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CancelarCompraLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(CancelarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CancelarCompraLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CancelarCompraLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(236, 236, 236))))
        );
        CancelarCompraLayout.setVerticalGroup(
            CancelarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CancelarCompraLayout.createSequentialGroup()
                .addGroup(CancelarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CancelarCompraLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel26))
                    .addGroup(CancelarCompraLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel27)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel10)))
                .addGroup(CancelarCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CancelarCompraLayout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(jButton12)
                        .addGap(62, 62, 62)
                        .addComponent(jButton5))
                    .addGroup(CancelarCompraLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        Administrador.addTab("Cancelar compra", CancelarCompra);

        HistorialCompras.setBackground(new java.awt.Color(255, 255, 255));

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cooltext482257288908357.png"))); // NOI18N

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/llave-inglesa.png"))); // NOI18N

        jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/visibility.png"))); // NOI18N
        jButton16.setText("Buscar");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(jTable4);

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/visibility.png"))); // NOI18N
        jButton10.setText("Ver todos los historiales de compras");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HistorialComprasLayout = new javax.swing.GroupLayout(HistorialCompras);
        HistorialCompras.setLayout(HistorialComprasLayout);
        HistorialComprasLayout.setHorizontalGroup(
            HistorialComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HistorialComprasLayout.createSequentialGroup()
                .addGroup(HistorialComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HistorialComprasLayout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24))
                    .addGroup(HistorialComprasLayout.createSequentialGroup()
                        .addGroup(HistorialComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(HistorialComprasLayout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addComponent(jButton10))
                            .addGroup(HistorialComprasLayout.createSequentialGroup()
                                .addGap(186, 186, 186)
                                .addComponent(jButton16)))
                        .addGap(149, 149, 149)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        HistorialComprasLayout.setVerticalGroup(
            HistorialComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HistorialComprasLayout.createSequentialGroup()
                .addGroup(HistorialComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HistorialComprasLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel25))
                    .addGroup(HistorialComprasLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel24)))
                .addGroup(HistorialComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HistorialComprasLayout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jButton16)
                        .addGap(153, 153, 153)
                        .addComponent(jButton10))
                    .addGroup(HistorialComprasLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        Administrador.addTab("Historial de compra", HistorialCompras);

        GestionProductos.setBackground(new java.awt.Color(255, 255, 255));

        jLabel12.setText("Cantidad");

        jLabel13.setBackground(new java.awt.Color(51, 51, 51));
        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setText("SUBA LOS PRODUCTOS FACIL Y RAPIDO");

        jLabel14.setText("Nombre");

        jLabel15.setText("Descripcion");

        jLabel16.setText("Categoria");

        jLabel17.setText("Marca");

        jLabel18.setText("Fecha");

        jLabel19.setText("Precio");

        txtNombre.setBorder(null);

        txtDescripcion.setColumns(20);
        txtDescripcion.setRows(5);
        jScrollPane3.setViewportView(txtDescripcion);

        txtCantidad.setBorder(null);

        txtMarca.setBorder(null);

        comboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Motor y componentes ", "Sistema de transmisión ", "Suspensión y dirección ", "Frenos", "Sistema eléctrico y de encendido", "Carrocería y partes exteriores", "Sistema de climatización y calefacción ", "Sistema de combustible", "Partes interiores", "Accesorios y herramientas" }));

        txtPrecio.setBorder(null);

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tablaProductos);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/visibility.png"))); // NOI18N
        jButton6.setText("Ver Productos");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/up-arrow.png"))); // NOI18N
        jButton7.setText("Subir");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/order.png"))); // NOI18N
        jButton8.setText("Modificar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cancelled.png"))); // NOI18N
        jButton9.setText("Eliminar");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GestionProductosLayout = new javax.swing.GroupLayout(GestionProductos);
        GestionProductos.setLayout(GestionProductosLayout);
        GestionProductosLayout.setHorizontalGroup(
            GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GestionProductosLayout.createSequentialGroup()
                .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GestionProductosLayout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(GestionProductosLayout.createSequentialGroup()
                        .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(GestionProductosLayout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtNombre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(GestionProductosLayout.createSequentialGroup()
                                        .addGap(76, 76, 76)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(GestionProductosLayout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(141, 141, 141)
                        .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtMarca, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSeparator9))
                            .addComponent(comboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GestionProductosLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GestionProductosLayout.createSequentialGroup()
                        .addGap(0, 56, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addGap(82, 82, 82)
                        .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9)
                            .addGroup(GestionProductosLayout.createSequentialGroup()
                                .addComponent(jButton7)
                                .addGap(83, 83, 83)
                                .addComponent(jButton8)))
                        .addGap(38, 38, 38))))
        );
        GestionProductosLayout.setVerticalGroup(
            GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GestionProductosLayout.createSequentialGroup()
                .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GestionProductosLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel13)
                        .addGap(61, 61, 61)
                        .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(93, 93, 93)
                        .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))
                        .addGap(36, 36, 36)
                        .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(GestionProductosLayout.createSequentialGroup()
                                .addComponent(comboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45))
                            .addGroup(GestionProductosLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78)
                                .addComponent(jLabel18)))
                        .addComponent(jLabel19))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GestionProductosLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6)
                            .addComponent(jButton8)
                            .addComponent(jButton7)))
                    .addGroup(GestionProductosLayout.createSequentialGroup()
                        .addGroup(GestionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(GestionProductosLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(GestionProductosLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addComponent(jButton9)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        Administrador.addTab("Gestion de productos", GestionProductos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Administrador)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Administrador)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
   EntityManagerFactory emf = Persistence.createEntityManagerFactory("ConfiguracionBd");
   EntityManager em = emf.createEntityManager();

     try {
    // Validaciones de campos obligatorios
    if (txtNombres.getText().trim().isEmpty() ||
        txtApellidos.getText().trim().isEmpty() ||
        cmbRol.getSelectedItem() == null ||
        txtNumeroDocumento.getText().trim().isEmpty() ||
        txtCorreo.getText().trim().isEmpty() ||
        setContrasena.getText().trim().isEmpty() ||
        cmbRol.getSelectedItem() == null) {

        JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos obligatorios.");
        return;
    }

    // Validaciones 
    if (!txtNombres.getText().matches("[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+")) {
    JOptionPane.showMessageDialog(null, "El nombre solo debe contener letras.");
    return;
    }
    if (!txtApellidos.getText().matches("[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+")) {
    JOptionPane.showMessageDialog(null, "El apellido solo debe contener letras.");
    return;
    }
    if (!txtNumeroDocumento.getText().matches("\\d+")) {
    JOptionPane.showMessageDialog(null, "El número de documento solo debe contener números.");
    return;
    }
    if (txtCorreo.getText().trim().length() > 100) {
        JOptionPane.showMessageDialog(null, "El correo no puede superar los 100 caracteres.");
        return;
    }
    if (txtTelefono.getText().trim().length() > 15) {
        JOptionPane.showMessageDialog(null, "El teléfono no puede superar los 15 caracteres.");
        return;
    }
    // Validar que teléfono solo contenga números
    if (!txtTelefono.getText().trim().matches("\\d+")) {
    JOptionPane.showMessageDialog(null, "El teléfono solo debe contener números.");
    return;
    }
    if (setContrasena.getText().trim().length() > 70) {
        JOptionPane.showMessageDialog(null, "La contraseña no puede superar los 70 caracteres.");
        return;
    }

    // Validar formato de correo
    if (!txtCorreo.getText().trim().matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
        JOptionPane.showMessageDialog(null, "El correo no tiene un formato válido.");
        return;
    }

    // Validar unicidad de correo y documento
    TypedQuery<Long> query = em.createQuery(
        "SELECT COUNT(u) FROM Usuarios u WHERE u.correo = :correo OR u.numeroDocumento = :numeroDocumento", Long.class);
    query.setParameter("correo", txtCorreo.getText().trim());
    query.setParameter("numeroDocumento", txtNumeroDocumento.getText().trim());

    Long count = query.getSingleResult();
    if (count > 0) {
        JOptionPane.showMessageDialog(null, "Ya existe un usuario con ese correo o número de documento.");
        return;
    }

    // Crear nuevo usuario
    Usuario usuario = new Usuario();
    usuario.setCodigo(UUID.randomUUID().toString());
    usuario.setNombres(txtNombres.getText().trim());
    usuario.setApellidos(txtApellidos.getText().trim());
    usuario.setTipoDocumento(comboTipoDocumento.getSelectedItem().toString());
    usuario.setNumeroDocumento(txtNumeroDocumento.getText().trim());
    usuario.setCorreo(txtCorreo.getText().trim());
    usuario.setTelefono(txtTelefono.getText().trim());
    usuario.setContraseña(setContrasena.getText().trim());

    // Convertir string a enum
    String rolSeleccionado = cmbRol.getSelectedItem().toString().toUpperCase();
    try {
        usuario.setRol(RolUsuarioEnum.valueOf(rolSeleccionado));  // Convierte el valor del JComboBox a enum
    } catch (IllegalArgumentException ex) {
        JOptionPane.showMessageDialog(null, "Rol inválido: " + rolSeleccionado);
        return;
    }

    // Guardar en la base de datos
    em.getTransaction().begin();
    em.persist(usuario);
    em.getTransaction().commit();

    JOptionPane.showMessageDialog(null, "Registro exitoso");
    limpiarCampos(); // Limpiar los campos si existe este método

}   catch (Exception e) {
    if (em.getTransaction().isActive()) {
        em.getTransaction().rollback();
    }
    e.printStackTrace();
    JOptionPane.showMessageDialog(null, "Error al registrar: " + e.getMessage());
}   finally {
    em.close();
    emf.close();
}


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("ConfiguracionBd");
    EntityManager em = emf.createEntityManager();

    try {
        // Traer usuarios de la base de datos
        List<Usuario> listaUsuarios = em.createQuery("SELECT u FROM Usuarios u", Usuario.class).getResultList();

        // Crear un modelo de tabla con las columnas deseadas
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[] {
            "Código", "Nombres", "Apellidos", "Tipo Doc", "N° Documento", "Correo", "Teléfono", "Rol"
        });

        // Llenar la tabla con los datos de cada usuario
        for (Usuario u : listaUsuarios) {
            modelo.addRow(new Object[] {
                u.getCodigo(),
                u.getNombres(),
                u.getApellidos(),
                u.getTipoDocumento(),
                u.getNumeroDocumento(),
                u.getCorreo(),
                u.getTelefono(),
                u.getRol()
            });
        }

        // Establecer el modelo a la tabla
        tablaUsuarios.setModel(modelo);

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al mostrar los usuarios: " + e.getMessage());
    } finally {
        em.close();
        emf.close();
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
      int filaSeleccionada = tablaUsuarios.getSelectedRow();

    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(null, "Selecciona un usuario para eliminar.");
        return;
    }

    // Confirmación antes de eliminar
    int confirmacion = JOptionPane.showConfirmDialog(null, "¿Estás seguro de que deseas eliminar este usuario?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
    if (confirmacion != JOptionPane.YES_OPTION) {
        return;
    }

    String codigoUsuario = tablaUsuarios.getValueAt(filaSeleccionada, 0).toString();

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("ConfiguracionBd");
    EntityManager em = emf.createEntityManager();

    try {
        em.getTransaction().begin();
        Usuario usuario = em.find(Usuario.class, codigoUsuario);
        if (usuario != null) {
            em.remove(usuario);
            em.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Usuario eliminado correctamente.");
            cargarUsuarios(); // Refrescar tabla
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el usuario.");
        }
    } catch (Exception e) {
        em.getTransaction().rollback();
        JOptionPane.showMessageDialog(null, "Error al eliminar el usuario: " + e.getMessage());
    } finally {
        em.close();
        emf.close();
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
 
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
          EntityManager em = ConexionBd.conectar().createEntityManager();
    GestionProductos producto = new GestionProductos();

    producto.setNombre(txtNombre.getText());
    producto.setDescripcion(txtDescripcion.getText());
    producto.setPrecio(Double.parseDouble(txtPrecio.getText()));
    producto.setCantidad(Integer.parseInt(txtCantidad.getText()));
    producto.setCategoria(comboCategoria.getSelectedItem().toString());
    producto.setMarca(txtMarca.getText());
    producto.setFecha(dateChooser.getDate());

    try {
        em.getTransaction().begin();
        em.persist(producto);
        em.getTransaction().commit();
        JOptionPane.showMessageDialog(this, "Producto guardado con éxito.");
        limpiarCampos2();
    } catch (Exception e) {
        em.getTransaction().rollback();
        JOptionPane.showMessageDialog(this, "Error al guardar: " + e.getMessage());
    } finally {
        em.close();
    }

   
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    // Configurar columnas de la tabla
    DefaultTableModel modelo = new DefaultTableModel(
        new Object[]{"ID", "Nombre", "Descripción", "Precio", "Cantidad", "Categoría", "Marca", "Fecha"}, 0
    );
    tablaProductos.setModel(modelo); // tablaProductos es tu JTable

    // Conexión JPA
    EntityManager em = ConexionBd.conectar().createEntityManager();

    try {
        List<GestionProductos> lista = em.createQuery("SELECT p FROM productos p", GestionProductos.class).getResultList();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy"); // Formateador de fecha

        for (GestionProductos p : lista) {
            modelo.addRow(new Object[]{
                p.getCodigo(),
                p.getNombre(),
                p.getDescripcion(),
                p.getPrecio(),
                p.getCantidad(),
                p.getCategoria(),
                p.getMarca(),
                sdf.format(p.getFecha()) // Formatear la fecha aquí
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al cargar productos: " + e.getMessage());
    } finally {
        em.close();
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
      int fila = tablaProductos.getSelectedRow();
    
    if (productoSeleccionado == null) { // Primera vez: cargar a campos
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un producto para modificar.");
            return;
        }

        Long id = Long.parseLong(tablaProductos.getValueAt(fila, 0).toString());

        EntityManager em = ConexionBd.conectar().createEntityManager();
        productoSeleccionado = em.find(GestionProductos.class, id);
        em.close();

        if (productoSeleccionado != null) {
            txtNombre.setText(productoSeleccionado.getNombre());
            txtDescripcion.setText(productoSeleccionado.getDescripcion());
            txtPrecio.setText(productoSeleccionado.getPrecio().toString());
            txtCantidad.setText(productoSeleccionado.getCantidad().toString());
            comboCategoria.setSelectedItem(productoSeleccionado.getCategoria());
            txtMarca.setText(productoSeleccionado.getMarca());
            dateChooser.setDate(productoSeleccionado.getFecha());

            JOptionPane.showMessageDialog(this, "Edita los campos y vuelve a presionar el botón para guardar los cambios.");
        } else {
            JOptionPane.showMessageDialog(this, "Producto no encontrado.");
        }

    } else { // Segunda vez: guardar cambios
        EntityManager em = ConexionBd.conectar().createEntityManager();

        try {
            em.getTransaction().begin();

            // Actualizar campos
            productoSeleccionado.setNombre(txtNombre.getText());
            productoSeleccionado.setDescripcion(txtDescripcion.getText());
            productoSeleccionado.setPrecio(Double.parseDouble(txtPrecio.getText()));
            productoSeleccionado.setCantidad(Integer.parseInt(txtCantidad.getText()));
            productoSeleccionado.setCategoria(comboCategoria.getSelectedItem().toString());
            productoSeleccionado.setMarca(txtMarca.getText());
            productoSeleccionado.setFecha(dateChooser.getDate());

            em.merge(productoSeleccionado);
            em.getTransaction().commit();

            JOptionPane.showMessageDialog(this, "Producto modificado correctamente.");

            // Limpiar estado
            productoSeleccionado = null;
            limpiarCampos2();
            

        } catch (Exception e) {
            em.getTransaction().rollback();
            JOptionPane.showMessageDialog(this, "Error al modificar: " + e.getMessage());
        } finally {
            em.close();
        }
    }

 


    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
      
    int fila = tablaProductos.getSelectedRow();
    if (fila == -1) {
        JOptionPane.showMessageDialog(this, "Selecciona un producto para eliminar.");
        return;
    }

    Long id = Long.parseLong(tablaProductos.getValueAt(fila, 0).toString());

    EntityManager em = ConexionBd.conectar().createEntityManager();
    GestionProductos producto = em.find(GestionProductos.class, id);

    if (producto != null) {
        try {
            em.getTransaction().begin();
            em.remove(producto);
            em.getTransaction().commit();
            JOptionPane.showMessageDialog(this, "Producto eliminado.");
        } catch (Exception e) {
            em.getTransaction().rollback();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        } finally {
            em.close();
        }

      
    } else {
        JOptionPane.showMessageDialog(this, "Producto no encontrado.");
    }


    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
    DefaultTableModel modelo = new DefaultTableModel(
    new Object[]{ "Nombre", "Descripción", "Precio", "Cantidad", "Categoría", "Marca" }, 0
);
   tablaProductos1.setModel(modelo);

   // Ajustar ancho de columnas
   tablaProductos1.getColumnModel().getColumn(0).setPreferredWidth(150); // Nombre
   tablaProductos1.getColumnModel().getColumn(1).setPreferredWidth(300); // Descripción
   tablaProductos1.getColumnModel().getColumn(2).setPreferredWidth(100); // Precio
   tablaProductos1.getColumnModel().getColumn(3).setPreferredWidth(100); // Cantidad
   tablaProductos1.getColumnModel().getColumn(4).setPreferredWidth(150); // Categoría
   tablaProductos1.getColumnModel().getColumn(5).setPreferredWidth(150); // Marca

   // Aumentar la altura de las filas
   tablaProductos1.setRowHeight(30);

   // Desactivar el autoajuste automático para que no se compriman las columnas
   tablaProductos1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

   // Cargar productos desde la base de datos
   EntityManager em = ConexionBd.conectar().createEntityManager();

try {
    List<GestionProductos> lista = em.createQuery("SELECT p FROM productos p", GestionProductos.class)
                                     .getResultList();

    for (GestionProductos p : lista) {
        modelo.addRow(new Object[]{
            p.getNombre(),
            p.getDescripcion(),
            p.getPrecio(),
            p.getCantidad(),
            p.getCategoria(),
            p.getMarca()
        });
    }

} catch (Exception e) {
    JOptionPane.showMessageDialog(this, "Error al cargar productos: " + e.getMessage());
} finally {
    em.close();
}

    
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
      DefaultTableModel modelo = new DefaultTableModel(
    new Object[]{ 
        "Nombre Producto", "Descripción", "Precio", "Cantidad", 
        "Método de Pago", "Nombre Cliente", "Tipo Documento", 
        "Número Documento", "Fecha", "Subtotal", "Total" 
    }, 0
);
    tablaProductos1.setModel(modelo);

    // Ajustar tamaño preferido por columna
    tablaProductos1.getColumnModel().getColumn(0).setPreferredWidth(150); // Nombre Producto
    tablaProductos1.getColumnModel().getColumn(1).setPreferredWidth(300); // Descripción
    tablaProductos1.getColumnModel().getColumn(2).setPreferredWidth(80);  // Precio
    tablaProductos1.getColumnModel().getColumn(3).setPreferredWidth(70);  // Cantidad
    tablaProductos1.getColumnModel().getColumn(4).setPreferredWidth(120); // Método de Pago
    tablaProductos1.getColumnModel().getColumn(5).setPreferredWidth(150); // Nombre Cliente
    tablaProductos1.getColumnModel().getColumn(6).setPreferredWidth(100); // Tipo Documento
    tablaProductos1.getColumnModel().getColumn(7).setPreferredWidth(130); // Número Documento
    tablaProductos1.getColumnModel().getColumn(8).setPreferredWidth(100); // Fecha
    tablaProductos1.getColumnModel().getColumn(9).setPreferredWidth(100); // Subtotal
    tablaProductos1.getColumnModel().getColumn(10).setPreferredWidth(100); // Total

    // Ajustar altura de las filas para mejor visibilidad
    tablaProductos1.setRowHeight(30);

    // Desactivar autoajuste de columnas para que respeten el ancho establecido
    tablaProductos1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

    // Pedir número de documento
    String cedula = JOptionPane.showInputDialog(null, "Ingrese su número de cédula para ver el carrito:");

if (cedula != null && !cedula.trim().isEmpty()) {
    EntityManager em = ConexionBd.conectar().createEntityManager();

    try {
        List<CarritoTemp> lista = em.createQuery(
            "SELECT c FROM CarritoTemp c WHERE c.numeroDocumento = :cedula", CarritoTemp.class)
            .setParameter("cedula", cedula)
            .getResultList();

        if (lista.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se encontraron productos para la cédula ingresada.");
        } else {
            for (CarritoTemp c : lista) {
                modelo.addRow(new Object[]{
                    c.getNombreProducto(),
                    c.getDescripcionProducto(),
                    c.getPrecioProducto(),
                    c.getCantidad(),
                    c.getMetodoPago(),
                    c.getNombreCliente(),
                    c.getTipoDocumento(),
                    c.getNumeroDocumento(),
                    c.getFecha(),
                    c.getSubtotal(),
                    c.getTotal()
                });
            }
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al cargar el carrito: " + e.getMessage());
    } finally {
        em.close();
    }

} else {
    JOptionPane.showMessageDialog(null, "Debe ingresar un número de cédula válido.");
}

       
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
      EntityManager em = ConexionBd.getEntityManager();
      EntityTransaction tx = em.getTransaction();

try {
    tx.begin();

    String nombreCliente = Nombre.getText().trim();
    String tipoDoc = comboTipo.getSelectedItem().toString();
    String numDoc = txtNumero.getText().trim();
    String metodoPago = comboMetodo.getSelectedItem().toString();

    // Validación: nombre solo letras
    if (!nombreCliente.matches("^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]+$")) {
        JOptionPane.showMessageDialog(null, "El nombre solo debe contener letras.");
        return;
    }

    if (!numDoc.matches("\\d+")) {
        JOptionPane.showMessageDialog(null, "El número de documento solo debe contener números.");
        return;
    }

    int fila = tablaProductos1.getSelectedRow();
    if (fila == -1) {
        JOptionPane.showMessageDialog(null, "Por favor selecciona un producto.");
        return;
    }

    String nombreProd = tablaProductos1.getValueAt(fila, 0).toString();
    String descripcion = tablaProductos1.getValueAt(fila, 1).toString();
    String precioStr = tablaProductos1.getValueAt(fila, 2).toString();

    double precio;
    try {
        precio = Double.parseDouble(precioStr);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Precio inválido en la tabla.");
        return;
    }

    int cantidadAgregar;
    try {
        cantidadAgregar = Integer.parseInt(JOptionPane.showInputDialog("Cantidad a agregar:"));
        if (cantidadAgregar <= 0) {
            JOptionPane.showMessageDialog(null, "Cantidad debe ser mayor a cero.");
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Cantidad inválida.");
        return;
    }

    // Verificar fecha seleccionada
    java.util.Date fechaSeleccionada = fechaChooser.getDate(); // ← tu JDateChooser
    if (fechaSeleccionada == null) {
        JOptionPane.showMessageDialog(null, "Por favor seleccione una fecha.");
        return;
    }

    java.time.LocalDate fechaLocal = fechaSeleccionada.toInstant().atZone(java.time.ZoneId.systemDefault()).toLocalDate();
    java.time.LocalDate hoy = java.time.LocalDate.now();

    if (fechaLocal.isBefore(hoy)) {
        JOptionPane.showMessageDialog(null, "La fecha no puede ser anterior a hoy.");
        return;
    }

    // Buscar producto en DB
    GestionProductos producto = em.createQuery("SELECT p FROM productos p WHERE p.nombre = :nombre", GestionProductos.class)
            .setParameter("nombre", nombreProd)
            .getSingleResult();

    if (producto.getCantidad() < cantidadAgregar) {
        JOptionPane.showMessageDialog(null, "No hay suficiente stock.");
        tx.rollback();
        return;
    }

    producto.setCantidad(producto.getCantidad() - cantidadAgregar);
    em.merge(producto);

    double subtotal = precio * cantidadAgregar;
    double total = subtotal;

    CarritoTemp carrito = new CarritoTemp(
            nombreCliente,
            tipoDoc,
            numDoc,
            metodoPago,
            nombreProd,
            descripcion,
            precio,
            cantidadAgregar
    );
    carrito.setFecha(fechaLocal);
    carrito.setSubtotal(subtotal);
    carrito.setTotal(total);

    em.persist(carrito);
    tx.commit();

    JOptionPane.showMessageDialog(null, "Producto agregado al carrito.");

    // ✅ LIMPIAR CAMPOS después de guardar
    Nombre.setText("");
    txtNumero.setText("");
    comboTipo.setSelectedIndex(0);
    comboMetodo.setSelectedIndex(0);
    fechaChooser.setDate(null);

} catch (Exception e) {
    if (tx.isActive()) tx.rollback();
    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
} finally {
    em.close();
}

    }//GEN-LAST:event_jButton14ActionPerformed

    private void txtTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelefonoActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        new InicioSesion().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3MouseClicked

    private void txtNumeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = tablaProductos1.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto para quitar del carrito.");
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tablaProductos1.getModel();

        // Obtener datos desde la fila seleccionada
        String nombreProducto = (String) modelo.getValueAt(filaSeleccionada, 0);
        String numeroDocumento = (String) modelo.getValueAt(filaSeleccionada, 7); // Asegúrate del índice correcto

        // Pedir cantidad a quitar
        String cantidadStr = JOptionPane.showInputDialog("Ingrese la cantidad a quitar:");
        if (cantidadStr == null || cantidadStr.isEmpty()) {
            return; // Cancelado por el usuario
        }

        int cantidadQuitar;
        try {
            cantidadQuitar = Integer.parseInt(cantidadStr);
            if (cantidadQuitar <= 0) {
                JOptionPane.showMessageDialog(null, "Cantidad inválida.");
                return;
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Cantidad inválida.");
            return;
        }

        EntityManager em = ConexionBd.conectar().createEntityManager();
        EntityTransaction tx = em.getTransaction();

        try {
            tx.begin();

            // Buscar el producto en CarritoTemp
            List<CarritoTemp> carritoItems = em.createQuery(
                "SELECT c FROM CarritoTemp c WHERE c.numeroDocumento = :doc AND c.nombreProducto = :nombre", CarritoTemp.class)
                .setParameter("doc", numeroDocumento)
                .setParameter("nombre", nombreProducto)
                .getResultList();

            if (carritoItems.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No se encontró el producto en el carrito.");
                tx.rollback();
                return;
            }

            CarritoTemp itemCarrito = carritoItems.get(0);
            int cantidadActualCarrito = itemCarrito.getCantidad();

            if (cantidadQuitar > cantidadActualCarrito) {
                JOptionPane.showMessageDialog(null, "La cantidad a quitar es mayor que la cantidad en el carrito.");
                tx.rollback();
                return;
            }

            // Buscar el producto en la tabla productos para actualizar stock
            List<GestionProductos> productos = em.createQuery(
                "SELECT p FROM productos p WHERE p.nombre = :nombre", GestionProductos.class)
                .setParameter("nombre", nombreProducto)
                .getResultList();

            if (productos.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No se encontró el producto en inventario.");
                tx.rollback();
                return;
            }

            GestionProductos productoInventario = productos.get(0);
            int cantidadActualInventario = productoInventario.getCantidad();

            // Actualizar cantidades
            int nuevaCantidadCarrito = cantidadActualCarrito - cantidadQuitar;
            int nuevaCantidadInventario = cantidadActualInventario + cantidadQuitar;

            if (nuevaCantidadCarrito == 0) {
                // Eliminar producto del carrito
                em.remove(itemCarrito);
                modelo.removeRow(filaSeleccionada);
            } else {
                // Actualizar carrito con nueva cantidad
                itemCarrito.setCantidad(nuevaCantidadCarrito);
                em.merge(itemCarrito);
                modelo.setValueAt(nuevaCantidadCarrito, filaSeleccionada, 3); // actualizar tabla carrito
            }

            // Actualizar inventario
            productoInventario.setCantidad(nuevaCantidadInventario);
            em.merge(productoInventario);

            tx.commit();

            JOptionPane.showMessageDialog(null, "Producto actualizado correctamente.");

        } catch (Exception ex) {
            if (tx.isActive()) {
                tx.rollback();
            }
            JOptionPane.showMessageDialog(null, "Error al quitar producto: " + ex.getMessage());
        } finally {
            em.close();
        }
    

    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // Pedimos al usuario que ingrese su número de cédula para registrar la compra
       String cedula = JOptionPane.showInputDialog(null, "Ingrese su cédula para registrar la compra:");

       // Verificamos si el usuario canceló o dejó el campo vacío
   if (cedula == null || cedula.trim().isEmpty()) {
       JOptionPane.showMessageDialog(null, "Debe ingresar una cédula válida.");
       return; // Salimos del método
}

       // Creamos el EntityManager y el EntityManagerFactory para conectarnos a la base de datos
       EntityManagerFactory emf = Persistence.createEntityManagerFactory("ConfiguracionBd");
       EntityManager em = emf.createEntityManager();

try {
    // Iniciamos la transacción
    em.getTransaction().begin();

    // Hacemos una consulta para obtener todos los productos en el carrito temporal asociados a la cédula
    TypedQuery<CarritoTemp> query = em.createQuery(
        "SELECT c FROM CarritoTemp c WHERE c.numeroDocumento = :documento", CarritoTemp.class);
    query.setParameter("documento", cedula);

    // Obtenemos los resultados como una lista
    List<CarritoTemp> productos = query.getResultList();

    // Si no se encontraron productos para esa cédula, mostramos un mensaje y cancelamos la transacción
    if (productos.isEmpty()) {
        JOptionPane.showMessageDialog(null, "No hay productos en el carrito para esta cédula.");
        em.getTransaction().rollback(); // Deshacemos la transacción por seguridad
        return; // Salimos del método
    }

    // Si hay productos, recorremos la lista y creamos una nueva compra por cada producto
    for (CarritoTemp producto : productos) {
        Compra compra = new Compra();
        compra.setNombreCliente(producto.getNombreCliente());              // Nombre del cliente
        compra.setDescripcionProducto(producto.getDescripcionProducto());  // Descripción del producto
        compra.setPrecioProducto(producto.getPrecioProducto());            // Precio unitario
        compra.setCantidad(producto.getCantidad());                        // Cantidad comprada
        compra.setNumeroDocumento(producto.getNumeroDocumento());          // Documento del cliente
        compra.setMetodoPago(producto.getMetodoPago());                    // Método de pago usado
        compra.setNombreProducto(producto.getNombreProducto());            // Nombre del producto
        compra.setTipoDocumento(producto.getTipoDocumento());              // Tipo de documento (C.C, T.I, etc.)

        // Guardamos la fecha actual como fecha de compra
        compra.setFechaCompra(LocalDateTime.now());

        // Calculamos el subtotal (precio * cantidad)
        double subtotal = producto.getPrecioProducto() * producto.getCantidad();
        compra.setSubtotal(subtotal);

        // Asignamos el total (en este ejemplo, igual al subtotal porque no hay impuestos o descuentos)
        compra.setTotal(subtotal);

        // Guardamos el objeto compra en la base de datos
        em.persist(compra);
    }

    // Confirmamos los cambios y guardamos en la base de datos
    em.getTransaction().commit();

    // Mostramos un mensaje indicando que todo salió bien
    JOptionPane.showMessageDialog(null, "¡Compra registrada exitosamente!");

} catch (Exception ex) {
    // Si ocurre un error, deshacemos la transacción (solo si aún está activa)
    if (em.getTransaction().isActive()) {
        em.getTransaction().rollback();
    }

    // Mostramos el mensaje de error
    JOptionPane.showMessageDialog(null, "Error al registrar la compra: " + ex.getMessage());

} finally {
    // Cerramos la conexión a la base de datos
    em.close();
    emf.close();
}
    
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
          DefaultTableModel modelo = new DefaultTableModel(
    new Object[]{ 
        "Nombre Producto", "Descripción", "Precio", "Cantidad", 
        "Método de Pago", "Nombre Cliente", "Tipo Documento", 
        "Número Documento", "Fecha", "Subtotal", "Total" 
    }, 0
    );
    jTable4.setModel(modelo);

    // Ajustar tamaño preferido por columna
    jTable4.getColumnModel().getColumn(0).setPreferredWidth(150); // Nombre Producto
    jTable4.getColumnModel().getColumn(1).setPreferredWidth(300); // Descripción
    jTable4.getColumnModel().getColumn(2).setPreferredWidth(80);  // Precio
    jTable4.getColumnModel().getColumn(3).setPreferredWidth(70);  // Cantidad
    jTable4.getColumnModel().getColumn(4).setPreferredWidth(120); // Método de Pago
    jTable4.getColumnModel().getColumn(5).setPreferredWidth(150); // Nombre Cliente
    jTable4.getColumnModel().getColumn(6).setPreferredWidth(100); // Tipo Documento
    jTable4.getColumnModel().getColumn(7).setPreferredWidth(130); // Número Documento
    jTable4.getColumnModel().getColumn(8).setPreferredWidth(100); // Fecha
    jTable4.getColumnModel().getColumn(9).setPreferredWidth(100); // Subtotal
    jTable4.getColumnModel().getColumn(10).setPreferredWidth(100); // Total

    // Opcional: ajustar altura si el texto es largo
    jTable4.setRowHeight(30);

    // Opcional: permitir ajuste automático al cambiar tamaño
    jTable4.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

    // Pedir número de documento
    String cedula = JOptionPane.showInputDialog(null, "Ingrese su número de cédula para ver el carrito:");

  if (cedula != null && !cedula.trim().isEmpty()) {
    EntityManager em = ConexionBd.conectar().createEntityManager();

    try {
        List<CarritoTemp> lista = em.createQuery(
            "SELECT c FROM CarritoTemp c WHERE c.numeroDocumento = :cedula", CarritoTemp.class)
            .setParameter("cedula", cedula)
            .getResultList();

        if (lista.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se encontraron productos para la cédula ingresada.");
        } else {
            for (CarritoTemp c : lista) {
                modelo.addRow(new Object[]{
                    c.getNombreProducto(),
                    c.getDescripcionProducto(),
                    c.getPrecioProducto(),
                    c.getCantidad(),
                    c.getMetodoPago(),
                    c.getNombreCliente(),
                    c.getTipoDocumento(),
                    c.getNumeroDocumento(),
                    c.getFecha(),
                    c.getSubtotal(),
                    c.getTotal()
                });
            }
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al cargar el carrito: " + e.getMessage());
    } finally {
        em.close();
    }

} else {
    JOptionPane.showMessageDialog(null, "Debe ingresar un número de cédula válido.");
}
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = new DefaultTableModel(
    new Object[]{ "Nombre Producto", "Descripción", "Precio", "Cantidad", "Método de Pago", "Nombre Cliente", "Tipo Documento", "Número Documento", "Fecha", "Subtotal", "Total" }, 0);
jTable4.setModel(modelo);

// Ajustar ancho columna "Descripción"
jTable4.getColumnModel().getColumn(1).setPreferredWidth(300);

EntityManager em = ConexionBd.conectar().createEntityManager();

try {
    // Consulta sin filtrar por cédula: trae todos los productos del carrito
    List<CarritoTemp> lista = em.createQuery(
        "SELECT c FROM CarritoTemp c", CarritoTemp.class)
        .getResultList();

    if (lista.isEmpty()) {
        JOptionPane.showMessageDialog(null, "No se encontraron productos en el carrito.");
    } else {
        // Mostrar productos en la tabla
        for (CarritoTemp c : lista) {
            modelo.addRow(new Object[]{
                c.getNombreProducto(),
                c.getDescripcionProducto(),
                c.getPrecioProducto(),
                c.getCantidad(),
                c.getMetodoPago(),
                c.getNombreCliente(),
                c.getTipoDocumento(),
                c.getNumeroDocumento(),
                c.getFecha(),
                c.getSubtotal(),
                c.getTotal()
            });
        }
    }

} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Error al cargar el carrito: " + e.getMessage());
} finally {
    em.close();
}

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
      // Crear y configurar el modelo de la tabla
DefaultTableModel modelo = new DefaultTableModel(
    new Object[]{ 
        "Nombre Producto", "Descripción", "Precio", "Cantidad", 
        "Método de Pago", "Nombre Cliente", "Tipo Documento", 
        "Número Documento", "Fecha", "Subtotal", "Total" 
    }, 0
);
jTable2.setModel(modelo);

// Configurar anchos adecuados para cada columna
jTable2.getColumnModel().getColumn(0).setPreferredWidth(150); // Nombre Producto
jTable2.getColumnModel().getColumn(1).setPreferredWidth(300); // Descripción
jTable2.getColumnModel().getColumn(2).setPreferredWidth(80);  // Precio
jTable2.getColumnModel().getColumn(3).setPreferredWidth(70);  // Cantidad
jTable2.getColumnModel().getColumn(4).setPreferredWidth(120); // Método de Pago
jTable2.getColumnModel().getColumn(5).setPreferredWidth(150); // Nombre Cliente
jTable2.getColumnModel().getColumn(6).setPreferredWidth(100); // Tipo Documento
jTable2.getColumnModel().getColumn(7).setPreferredWidth(130); // Número Documento
jTable2.getColumnModel().getColumn(8).setPreferredWidth(100); // Fecha
jTable2.getColumnModel().getColumn(9).setPreferredWidth(100); // Subtotal
jTable2.getColumnModel().getColumn(10).setPreferredWidth(100); // Total

// Ajustar altura de las filas (opcional)
jTable2.setRowHeight(30);

// Permitir desplazamiento horizontal si es necesario
jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

// Verifica que jTable2 esté dentro de un JScrollPane en tu diseño, así:
// JScrollPane scroll = new JScrollPane(jTable2);
// scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

// Pedir número de cédula
String cedula = JOptionPane.showInputDialog(null, "Ingrese su número de cédula para ver el carrito:");

// Validar que no esté vacío
if (cedula != null && !cedula.trim().isEmpty()) {
    EntityManager em = ConexionBd.conectar().createEntityManager();

    try {
        // Limpia el modelo de la tabla antes de llenar
        modelo.setRowCount(0);

        // Consulta con parámetro por cédula
        List<CarritoTemp> lista = em.createQuery(
            "SELECT c FROM CarritoTemp c WHERE c.numeroDocumento = :cedula", CarritoTemp.class)
            .setParameter("cedula", cedula)
            .getResultList();

        if (lista.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se encontraron productos para la cédula ingresada.");
        } else {
            // Llenar la tabla con los datos obtenidos
            for (CarritoTemp c : lista) {
                modelo.addRow(new Object[]{
                    c.getNombreProducto(),
                    c.getDescripcionProducto(),
                    c.getPrecioProducto(),
                    c.getCantidad(),
                    c.getMetodoPago(),
                    c.getNombreCliente(),
                    c.getTipoDocumento(),
                    c.getNumeroDocumento(),
                    c.getFecha(),
                    c.getSubtotal(),
                    c.getTotal()
                });
            }
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al cargar el carrito: " + e.getMessage());
    } finally {
        em.close();
    }

} else {
    JOptionPane.showMessageDialog(null, "Debe ingresar un número de cédula válido.");
}

        
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable2.getSelectedRow();

        if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(null, "Seleccione un producto para quitar del carrito.");
        return;
}

        DefaultTableModel modelo = (DefaultTableModel) jTable2.getModel();

        // Obtener datos desde la fila seleccionada
        String nombreProducto = (String) modelo.getValueAt(filaSeleccionada, 0);
        String numeroDocumento = (String) modelo.getValueAt(filaSeleccionada, 7); // columna "Número Documento"

        EntityManager em = ConexionBd.conectar().createEntityManager();
        EntityTransaction tx = em.getTransaction();

  try {
    tx.begin();

    // Buscar el producto en CarritoTemp
    List<CarritoTemp> carritoItems = em.createQuery(
        "SELECT c FROM CarritoTemp c WHERE c.numeroDocumento = :doc AND c.nombreProducto = :nombre", CarritoTemp.class)
        .setParameter("doc", numeroDocumento)
        .setParameter("nombre", nombreProducto)
        .getResultList();

    if (carritoItems.isEmpty()) {
        JOptionPane.showMessageDialog(null, "No se encontró el producto en el carrito.");
        tx.rollback();
        return;
    }

    CarritoTemp itemCarrito = carritoItems.get(0);
    int cantidadCarrito = itemCarrito.getCantidad();

    // Buscar el producto en inventario
    List<GestionProductos> productos = em.createQuery(
        "SELECT p FROM productos p WHERE p.nombre = :nombre", GestionProductos.class)
        .setParameter("nombre", nombreProducto)
        .getResultList();

    if (productos.isEmpty()) {
        JOptionPane.showMessageDialog(null, "No se encontró el producto en inventario.");
        tx.rollback();
        return;
    }

    GestionProductos productoInventario = productos.get(0);

    // Actualizar inventario
    int nuevaCantidadInventario = productoInventario.getCantidad() + cantidadCarrito;
    productoInventario.setCantidad(nuevaCantidadInventario);
    em.merge(productoInventario);

    // Eliminar el producto del carrito
    em.remove(itemCarrito);
    modelo.removeRow(filaSeleccionada); // quitar de la tabla visual

    tx.commit();

    JOptionPane.showMessageDialog(null, "Producto eliminado del carrito y stock actualizado.");

} catch (Exception ex) {
    if (tx.isActive()) {
        tx.rollback();
    }
    JOptionPane.showMessageDialog(null, "Error al eliminar producto: " + ex.getMessage());
} finally {
    em.close();
}

    }//GEN-LAST:event_jButton5ActionPerformed
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Administrador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Administrador;
    private javax.swing.JPanel CancelarCompra;
    private javax.swing.JPanel GestionProductos;
    private javax.swing.JPanel HistorialCompras;
    private javax.swing.JTextField Nombre;
    private javax.swing.JPanel RealizarCompra;
    private javax.swing.JPanel Registro;
    private javax.swing.JPanel Usuarios;
    private javax.swing.JComboBox<String> cmbRol;
    private javax.swing.JComboBox<String> comboCategoria;
    private javax.swing.JComboBox<String> comboMetodo;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JComboBox<String> comboTipoDocumento;
    private com.toedter.calendar.JDateChooser dateChooser;
    private com.toedter.calendar.JDateChooser fechaChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    private javax.swing.JPasswordField setContrasena;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTable tablaProductos1;
    private javax.swing.JTable tablaUsuarios;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextArea txtDescripcion;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtNumeroDocumento;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
    txtNombres.setText("");
    txtApellidos.setText("");
    txtNumeroDocumento.setText("");
    txtCorreo.setText("");
    txtTelefono.setText("");
    setContrasena.setText("");
    comboTipoDocumento.setSelectedIndex(-1); // Deselecciona cualquier opción
    cmbRol.setSelectedIndex(-1);             // Deselecciona cualquier opción
    }

    private void cargarUsuarios() {
       EntityManagerFactory emf = Persistence.createEntityManagerFactory("ConfiguracionBd");
    EntityManager em = emf.createEntityManager();

    try {
        List<Usuario> listaUsuarios = em.createQuery("SELECT u FROM Usuarios u", Usuario.class).getResultList();

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[] {
            "Código", "Nombres", "Apellidos", "Tipo Doc", "N° Documento", "Correo", "Teléfono", "Rol"
        });

        for (Usuario u : listaUsuarios) {
            modelo.addRow(new Object[] {
                u.getCodigo(),
                u.getNombres(),
                u.getApellidos(),
                u.getTipoDocumento(),
                u.getNumeroDocumento(),
                u.getCorreo(),
                u.getTelefono(),
                u.getRol().toString()
            });
        }

        tablaUsuarios.setModel(modelo);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al cargar los usuarios: " + e.getMessage());
    } finally {
        em.close();
        emf.close();
    }
    }

    private GestionProductos productoSeleccionado = null;

    private void limpiarCampos2() {
    txtNombre.setText("");
    txtDescripcion.setText("");
    txtPrecio.setText("");
    txtCantidad.setText("");
    comboCategoria.setSelectedIndex(0);
    txtMarca.setText("");
    dateChooser.setDate(null);
    }

}
