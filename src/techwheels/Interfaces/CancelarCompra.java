/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package techwheels.Interfaces;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import techwheels.Clases.CarritoTemp;
import techwheels.Clases.GestionProductos;
import techwheels.Infraestructura.Config.Bd.ConexionBd;

/**
 *
 * @author anton
 */
public class CancelarCompra extends javax.swing.JFrame {

    /**
     * Creates new form AgregarEliminarAlCarrito
     */
    public CancelarCompra() {
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cooltext482257288908357.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 35, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/llave-inglesa.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 16, -1, -1));

        jButton1.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cancelled.png"))); // NOI18N
        jButton1.setText("SI, CANCELAR COMPRA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 290, 220, -1));

        jLabel3.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("¿DESEAS CANCELAR TU COMPRA?");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(112, 156, -1, -1));

        jButton2.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 0));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/cancelled.png"))); // NOI18N
        jButton2.setText("NO, VOLVER");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(129, 391, 199, -1));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(493, 135, 534, 411));

        jButton3.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 0));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/techwheels/Imagenes/visibility.png"))); // NOI18N
        jButton3.setText("Buscar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, 220, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int filaSeleccionada = jTable2.getSelectedRow();

        if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(null, "Seleccione un producto para quitar del carrito.");
        return;
}

        DefaultTableModel modelo = (DefaultTableModel) jTable2.getModel();

        // Obtener datos desde la fila seleccionada
        String nombreProducto = (String) modelo.getValueAt(filaSeleccionada, 0);
        String numeroDocumento = (String) modelo.getValueAt(filaSeleccionada, 7); // columna "Número Documento"

        EntityManager em = ConexionBd.conectar().createEntityManager();
        EntityTransaction tx = em.getTransaction();

  try {
    tx.begin();

    // Buscar el producto en CarritoTemp
    List<CarritoTemp> carritoItems = em.createQuery(
        "SELECT c FROM CarritoTemp c WHERE c.numeroDocumento = :doc AND c.nombreProducto = :nombre", CarritoTemp.class)
        .setParameter("doc", numeroDocumento)
        .setParameter("nombre", nombreProducto)
        .getResultList();

    if (carritoItems.isEmpty()) {
        JOptionPane.showMessageDialog(null, "No se encontró el producto en el carrito.");
        tx.rollback();
        return;
    }

    CarritoTemp itemCarrito = carritoItems.get(0);
    int cantidadCarrito = itemCarrito.getCantidad();

    // Buscar el producto en inventario
    List<GestionProductos> productos = em.createQuery(
        "SELECT p FROM productos p WHERE p.nombre = :nombre", GestionProductos.class)
        .setParameter("nombre", nombreProducto)
        .getResultList();

    if (productos.isEmpty()) {
        JOptionPane.showMessageDialog(null, "No se encontró el producto en inventario.");
        tx.rollback();
        return;
    }

    GestionProductos productoInventario = productos.get(0);

    // Actualizar inventario
    int nuevaCantidadInventario = productoInventario.getCantidad() + cantidadCarrito;
    productoInventario.setCantidad(nuevaCantidadInventario);
    em.merge(productoInventario);

    // Eliminar el producto del carrito
    em.remove(itemCarrito);
    modelo.removeRow(filaSeleccionada); // quitar de la tabla visual

    tx.commit();

    JOptionPane.showMessageDialog(null, "Producto eliminado del carrito y stock actualizado.");

} catch (Exception ex) {
    if (tx.isActive()) {
        tx.rollback();
    }
    JOptionPane.showMessageDialog(null, "Error al eliminar producto: " + ex.getMessage());
} finally {
    em.close();
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       // Crear y configurar el modelo de la tabla
DefaultTableModel modelo = new DefaultTableModel(
    new Object[]{ 
        "Nombre Producto", "Descripción", "Precio", "Cantidad", 
        "Método de Pago", "Nombre Cliente", "Tipo Documento", 
        "Número Documento", "Fecha", "Subtotal", "Total" 
    }, 0
);
jTable2.setModel(modelo);

// Configurar anchos adecuados para cada columna
jTable2.getColumnModel().getColumn(0).setPreferredWidth(150); // Nombre Producto
jTable2.getColumnModel().getColumn(1).setPreferredWidth(300); // Descripción
jTable2.getColumnModel().getColumn(2).setPreferredWidth(80);  // Precio
jTable2.getColumnModel().getColumn(3).setPreferredWidth(70);  // Cantidad
jTable2.getColumnModel().getColumn(4).setPreferredWidth(120); // Método de Pago
jTable2.getColumnModel().getColumn(5).setPreferredWidth(150); // Nombre Cliente
jTable2.getColumnModel().getColumn(6).setPreferredWidth(100); // Tipo Documento
jTable2.getColumnModel().getColumn(7).setPreferredWidth(130); // Número Documento
jTable2.getColumnModel().getColumn(8).setPreferredWidth(100); // Fecha
jTable2.getColumnModel().getColumn(9).setPreferredWidth(100); // Subtotal
jTable2.getColumnModel().getColumn(10).setPreferredWidth(100); // Total

// Ajustar altura de las filas (opcional)
jTable2.setRowHeight(30);

// Permitir desplazamiento horizontal si es necesario
jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

// Verifica que jTable2 esté dentro de un JScrollPane en tu diseño, así:
// JScrollPane scroll = new JScrollPane(jTable2);
// scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

// Pedir número de cédula
String cedula = JOptionPane.showInputDialog(null, "Ingrese su número de cédula para ver el carrito:");

// Validar que no esté vacío
if (cedula != null && !cedula.trim().isEmpty()) {
    EntityManager em = ConexionBd.conectar().createEntityManager();

    try {
        // Limpia el modelo de la tabla antes de llenar
        modelo.setRowCount(0);

        // Consulta con parámetro por cédula
        List<CarritoTemp> lista = em.createQuery(
            "SELECT c FROM CarritoTemp c WHERE c.numeroDocumento = :cedula", CarritoTemp.class)
            .setParameter("cedula", cedula)
            .getResultList();

        if (lista.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se encontraron productos para la cédula ingresada.");
        } else {
            // Llenar la tabla con los datos obtenidos
            for (CarritoTemp c : lista) {
                modelo.addRow(new Object[]{
                    c.getNombreProducto(),
                    c.getDescripcionProducto(),
                    c.getPrecioProducto(),
                    c.getCantidad(),
                    c.getMetodoPago(),
                    c.getNombreCliente(),
                    c.getTipoDocumento(),
                    c.getNumeroDocumento(),
                    c.getFecha(),
                    c.getSubtotal(),
                    c.getTotal()
                });
            }
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al cargar el carrito: " + e.getMessage());
    } finally {
        em.close();
    }

} else {
    JOptionPane.showMessageDialog(null, "Debe ingresar un número de cédula válido.");
}

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Cliente().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CancelarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CancelarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CancelarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CancelarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CancelarCompra().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
